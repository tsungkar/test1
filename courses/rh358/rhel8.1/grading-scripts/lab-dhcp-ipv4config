#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-dhcp-ipv4config - grading script for RH358 Configuring IPv4 Address
#                           Assignment with DHCP guided exercise
#
# SYNOPSIS
#     lab-dhcp-ipv4config {start|finish}
#
#        start   - prepare the system for starting the lab
#        finish  - perform post-lab cleanup
#
# DESCRIPTION
#     This script, based on singular argument, either does start or finish
#     for the RH358 Configuring IPv4 Address Assignment with DHCP guided
#     exercise.
#
# CHANGELOG
#   * Tue Mar 24 2020 Herve Quatremain <hquatrem@redhat.com>
#   - original code

PATH=/usr/bin:/bin:/usr/sbin:/sbin

# Initialize and set some variables
run_as_root='true'

# serverd is not used in the exercise. However, its second interface must be
# stopped to prevent it from sending DHCP requests.
target_a='servera'
target_b='serverb'
target_c='serverc'
target_d='serverd'

# MAC address of the first/main interface
# All the other interfaces are disabled by the lab_start() function
mac_a='52:54:00:00:fa:0a'
mac_b='52:54:00:00:fa:0b'
mac_c='52:54:00:00:fa:0c'
mac_d='52:54:00:00:fa:0d'

subnet='192.168.0'

files_to_backup="/etc/sysconfig/network-scripts/ifcfg-* /etc/resolv.conf /etc/hosts /etc/machine-id"

# This defines which subcommands are supported (start, grade, etc.).
# Corresponding lab_COMMAND functions must be defined.
declare -a valid_commands=(start finish)


function lab_start {

  print_header 'Starting lab.'

  print_line "Preparing ${target_a}, ${target_b}, ${target_c}, and ${target_d} for lab exercise work:"
  print_line
  host_reachable ${target_a} ${target_b} ${target_c} ${target_d}

  for target_mac in ${target_a},${mac_a} ${target_b},${mac_b} ${target_c},${mac_c} ${target_d},${mac_d}
  do
    target=${target_mac%%,*}
    mac=${target_mac##*,}

    # Disabling autoconnect on all the connections associated with the second
    # and third network interfaces.  This way, we make sure that those
    # interfaces will not pickup a DHCP lease as soon as the DHCP server goes up.
    pad " · Deactivating the secondary interfaces on ${target}"

    # Retrieving all the interface names but skip lo and the main interface
    for INTERFACE in $(${ssh} ${target} 'ip -brief link show' | awk -v MAC=${mac} 'BEGIN { IGNORECASE = 1;} $1 !~ /lo/ && $3 != MAC { print $1}')
    do
      # For all the NetworkManager connections associated with the interface,
      # disable autoconnect and stop the connection
      for CON in $(${ssh} ${target} 'nmcli --get-values UUID connection show')
      do
        ${ssh} ${target} "nmcli --get-values connection.interface-name,GENERAL.DEVICES con show '${CON}'" | grep -wq "${INTERFACE}"
        if [ $? -eq 0 ]
        then
          ${ssh} ${target} "nmcli con mod '${CON}' connection.autoconnect no ; nmcli --wait 0 con down '${CON}'"
        fi
      done
    done
    print_SUCCESS

    pad " · Backing up network configuration on ${target}"
    if ${ssh} ${target} "test -s /var/tmp/lab-${problem_name}.tgz || tar zcf /var/tmp/lab-${problem_name}.tgz --xattrs -C / ${files_to_backup}"
    then
      print_SUCCESS
    else
      print_FAIL
    fi
  done

  pad " · Deploying the sample DHCP configuration on ${target_a}"
  if ${ssh} ${target_a} "mkdir -p /root/${problem_name}"
  then
    cat <<EOF | ${ssh} ${target_a} "cat > /root/${problem_name}/dhcpd-1.conf"
authoritative;

subnet ${subnet}.0 netmask 255.255.255.0 {
  range ${subnet}.200 ${subnet}.254;
  option broadcast-address ${subnet}.255;
  option domain-name-servers 172.25.254.254;
  option domain-search "example.net";
  default-lease-time 600;
  max-lease-time 7200;
}
EOF
    cat <<EOF | ${ssh} ${target_a} "cat > /root/${problem_name}/dhcpd-2.conf"
authoritative;

subnet ${subnet}.0 netmask 255.255.255.0 {
  range ${subnet}.200 ${subnet}.254;
  option broadcast-address ${subnet}.255;
  option domain-name-servers 172.25.254.254;
  option domain-search "example.net";
  default-lease-time 600;
  max-lease-time 7200;
}
host serverc {
  hardware ethernet 52:54:00:01:fa:0c;
  fixed-address ${subnet}.100;
}
EOF
    print_SUCCESS
  else
    print_FAIL
  fi

  pad " · Adding the example.net domain to the DNS on bastion"
  cat <<EOF | ${ssh} bastion "cat > /etc/dnsmasq.d/${problem_name}.conf"
host-record=servera.example.net,${subnet}.10
host-record=serverb.example.net,${subnet}.11
host-record=serverc.example.net,${subnet}.12
host-record=serverd.example.net,${subnet}.13
EOF
  ${ssh} bastion "systemctl is-active dnsmasq && systemctl restart dnsmasq"
  print_SUCCESS

  print_line
}


function lab_finish {

  print_header "Cleaning up the lab on ${target_a}, ${target_b}, ${target_c}, and ${target_d}:"
  host_reachable ${target_a} ${target_b} ${target_c} ${target_d}

  pad " · Removing the example.net domain from the DNS on bastion"
  ${ssh} bastion rm -f /etc/dnsmasq.d/${problem_name}.conf
  ${ssh} bastion "systemctl is-active dnsmasq && systemctl restart dnsmasq"
  print_SUCCESS

  for target_mac in ${target_b},${mac_b} ${target_c},${mac_c} ${target_d},${mac_d} ${target_a},${mac_a}
  do
    target=${target_mac%%,*}
    mac=${target_mac##*,}

    # Removing all the connections except the connection associated with the
    # first/main interface
    pad " · Deactivating the secondary interfaces on ${target}"

    # Retrieving all the interface names but skip lo and the main interface
    for INTERFACE in $(${ssh} ${target} 'ip -brief link show' | awk -v MAC=${mac} 'BEGIN { IGNORECASE = 1;} $1 !~ /lo/ && $3 != MAC { print $1}')
    do
      # For all the NetworkManager connections associated with the interface,
      # stop and delete the connection
      for CON in $(${ssh} ${target} 'nmcli --get-values UUID connection show')
      do
        ${ssh} ${target} "nmcli --get-values connection.interface-name,GENERAL.DEVICES con show '${CON}'" | grep -wq "${INTERFACE}"
        if [ $? -eq 0 ]
        then
          ${ssh} ${target} "nmcli --wait 10 con down '${CON}' ; nmcli --wait 10 con delete '${CON}'"
        fi
      done
    done
    print_SUCCESS

    pad " · Restoring network configuration on ${target}"
    ${ssh} ${target} "test -s /var/tmp/lab-${problem_name}.tgz && tar xf /var/tmp/lab-${problem_name}.tgz --xattrs -C / ; rm -f /var/tmp/lab-${problem_name}.tgz; nmcli --wait 0 con reload"
    print_SUCCESS
  done

  pad " · Removing the dhcp-server package from ${target_a}"
  ${ssh} ${target_a} 'yum remove -y dhcp-server'
  print_SUCCESS

  pad " · Closing the firewall port on ${target_a}"
  ${ssh} ${target_a} 'firewall-cmd --remove-service=dhcp --remove-service=dhcpv6 --permanent ; firewall-cmd --remove-service=dhcp --remove-service=dhcpv6'
  print_SUCCESS

  pad " · Cleaning up DHCP configuration on ${target_a}"
  ${ssh} ${target_a} 'rm -rf /etc/dhcp/dhcpd* /etc/sysconfig/dhcpd /var/lib/dhcpd'
  print_SUCCESS

  pad " · Cleaning up the sample DHCP configuration on ${target_a}"
  ${ssh} ${target_a} "rm -rf /root/${problem_name}"
  print_SUCCESS

  print_line
  print_line 'Lab finished.'
  print_line
}

############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
