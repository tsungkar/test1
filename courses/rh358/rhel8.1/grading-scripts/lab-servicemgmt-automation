#!/bin/bash
#
# Copyright 2020 Red Hat, Inc.
#
# NAME
#     lab-servicemgmt-automation - start/finish script for RH358
#
# SYNOPSIS
#     lab-servicemgmt-automation {start|finish}
#
# DESCRIPTION
#     This script performs the start/finish steps for the service
#     management automation guided exercise for RH358. Since the
#     student does their work on servera, this script removes/restores
#     the network configuration of the 2nd network interface. It also
#     configures/restores the 2nd network interface on another host to
#     respond to pings directed to 192.168.0.254.
#
# CHANGELOG
#   * Tue Mar 24 2020 George Hacker <ghacker@redhat.com>
#   - original code


PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

# Initialize and set some variables
run_as_root='true'

host='servera'
gateway='serverd'

iface_number='2'
gateway_IP4='192.168.0.254/24'
host_conn_name='static_net'

# ${problem_name} is defined by the calling "lab" script
lab_materials="http://materials.example.com/labs/${problem_name}"
lab_dir="/home/student/${problem_name}"

declare -a valid_commands=(start finish)


function lab_start {

  print_header 'Starting servicemgmt-automation exercise.'

  print_line "Preparing ${host} and ${gateway} for lab exercise work:"
  print_line
  host_reachable ${host}
  host_reachable ${gateway}

  rhel_install_ansible

  if ! cd ${lab_dir}; then
    pad ' · Create exercise directory'
    if mkdir -p ${lab_dir} && cd ${lab_dir}; then
      print_SUCCESS
    else
      print_FAIL ; exit 1
    fi
  fi

  pad ' · Download Ansible configuration'
  if curl -s -O ${lab_materials}/ansible.cfg
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  pad ' · Download Ansible inventory'
  if curl -s -O ${lab_materials}/inventory
  then
    print_SUCCESS
  else
    print_FAIL
  fi

  chown -R student:student .

  if ! iface_gw=$(rhel_get_nicname ${gateway} ${iface_number}); then
    pad " · Error: unable to get gateway interface name - ${gateway}"
    print_FAIL ; exit 1
  fi
  if ! iface_host=$(rhel_get_nicname ${host} ${iface_number}); then
    pad " · Error: unable to get host interface name - ${host}"
    print_FAIL ; exit 1
  fi

  if ! ${ssh} ${gateway} "nmcli con show id '${iface_gw}'"; then
    pad " · Configuring ${gateway} as an IPv4 gateway"
    cmd1="nmcli con add con-name '${iface_gw}' type ethernet ifname ${iface_gw}"
    cmd2="nmcli con mod '${iface_gw}' ipv4.addresses '${gateway_IP4}'"
    cmd3="nmcli con mod '${iface_gw}' ipv4.method manual"
    cmd4="nmcli con up '${iface_gw}'"
    if ${ssh} ${gateway} "${cmd1} && ${cmd2} && ${cmd3} && ${cmd4}"; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    pad " · Warning: network device already configured on ${gateway}"
    print_SUCCESS
  fi

  if ${ssh} ${host} "nmcli con show id '${host_conn_name}'"; then
    pad " · Unconfiguring network interface on ${host}"
    if ${ssh} ${host} "nmcli con delete id '${host_conn_name}'"; then
      print_SUCCESS
    else
      print_FAIL
    fi
  fi

  print_line
}

function lab_finish {

  print_header "Finishing ${problem_name} exercise."

  host_reachable ${host} ${gateway}

  if ! iface_gw=$(rhel_get_nicname ${gateway} ${iface_number}); then
    pad " · Error: unable to get gateway interface name - ${gateway}"
    print_FAIL
    exit 1
  fi
  if ! iface_host=$(rhel_get_nicname ${host} ${iface_number}); then
    pad " · Error: unable to get host interface name - ${host}"
    print_FAIL
    exit 1
  fi

  if ${ssh} ${gateway} "nmcli con show id '${iface_gw}'"; then
    pad " · Unconfiguring ${gateway} as an IPv4 gateway"
    if ${ssh} ${gateway} "nmcli con delete id '${iface_gw}'"; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    pad " · Warning: network device not configured on ${gateway}"
    print_SUCCESS
  fi

  if ${ssh} ${host} "nmcli con show id '${host_conn_name}'"; then
    pad " · Unconfiguring network interface on ${host}"
    if ${ssh} ${host} "nmcli con delete id '${host_conn_name}'"; then
      print_SUCCESS
    else
      print_FAIL
    fi
  else
    pad " · Warning: network device not configured on ${host}"
    print_SUCCESS
  fi

  print_line
}


############### Don't EVER change anything below this line ###############

# Source library of functions
source /usr/local/lib/${function_lib}
source /usr/local/lib/${platform_lib}

grading_main_program "$@"
